template <typename T>
class List;

template <typename T>
ostream &operator<<( ostream &, const List<T> & );

template <typename T>
class List {

  friend ostream &operator<< <>( ostream &, const List<T> & );

  public:
    List();
    List( const List<T> & ) throw ( bad_alloc );
    ~List();
    void add( unsigned, const T & ) throw ( bad_alloc, out_of_range );
    void addAll( const List<T> & ) throw ( bad_alloc );
    void addAll( unsigned, const List<T> & ) throw ( bad_alloc, out_of_range );
    void addFirst( const T & ) throw ( bad_alloc );
    void addLast( const T & ) throw ( bad_alloc );
    void clear();
    bool contains( const T & ) const;
    bool empty() const;
    int indexOf( const T & ) const;
    T &get( unsigned ) const throw ( out_of_range );
    T &getFirst() const throw ( NoSuchObject );
    T &getLast() const throw ( NoSuchObject );
    ListIterator<T> listIterator();
    ListIterator<T> listIterator( unsigned ) throw ( out_of_range );
    T remove( unsigned ) throw ( out_of_range );
    T removeFirst() throw ( NoSuchObject );
    T removeFirstOccurrence( const T & ) throw ( NoSuchObject );
    T removeLast() throw ( NoSuchObject );
    T removeLastOccurrence( const T & ) throw ( NoSuchObject );
    T set( unsigned, const T & ) throw ( out_of_range );
    unsigned size() const;
    T *toArray() const throw ( bad_alloc );
    const List<T> &operator=( const List<T> & ) throw ( bad_alloc );
    void printInternal( ostream & = cout ) const;

  private:
    Node<T> *frontPtr, *backPtr;
    unsigned sz;

    void add( Node<T> *, const T & ) throw ( bad_alloc );
    void initialize();
    Node<T> *getIthNode( unsigned ) const throw ( out_of_range );
    T remove( Node<T> * );

}; // List class
